#!/bin/bash
#       Name: dpass - Default Password DB
#    Version: 1.0 (Release date: 2017-01-01, happy new year, you dirty animals)
# Written by: pwnEIP
#   Homepage: http://pwneip.com
## NOTE:
#   Exit code '0' normal exit
#   Exit code '1' error exit
#   Exit code '2' help exit
#   Exit code '3' update exit

## Special thanks to Searchsploit | Unix-Ninja & g0tmi1k for providing a good model and source

gitpath="/opt/dpass"
csvpath="${gitpath}/dpass.csv"

gitremote="https://github.com/pwnEIP/dpass.git"
progname="$( basename "$0" )"

notruncate=0

## Usage info
function usage()
{
  echo "  Usage: ${progname} [args] term1 [term2] ... [termN]"
  echo
  echo " Example: "
  echo "  ${progname} cisco"
  echo
  echo " Options: "
  echo "   -h, --help              Show this help screen."
  echo "   -d,			   Don't truncate"
  echo "   -u, --update            Check for and install updated dpass.csv"
  exit 2
}

## Update database check
function update()
{
  dpkg -l dpass 2>/dev/null >/dev/null
  if [[ "$?" == "0" ]]; then
    # Update from the repos (e.g. Kali)
    updatedeb
  else
    # Update via git
    updategit
  fi
}

## Update database
function updatedeb()
{
  echo -e '[i] Updating via package management.\n'

  sudo apt update \
    || echo -e '\n[!] Issue with apt update (Please check network connectivity & apt SourcesList)' 1>&2
  sudo apt -y install exploitdb \
      || echo -e '\n[!] Issue with apt install' 1>&2

  echo -e "\n[*] Update finished."
  exit 6
}

## Update database (via GIT)
function updategit()
{
  echo -e '[i] Updating via git.\n'

  ## Make sure we are in the correct folder
  mkdir -p "${gitpath}/"
  cd "${gitpath}/"

  ## Are we in a git repo?
  if [[ "$( git rev-parse --is-inside-work-tree )" != "true" ]]; then
    if [[ "$( ls )" = "" ]]; then
      # If directory is empty, just clone
      echo -e '\n[i] Nothing here. Starting fresh...'
      git clone "${gitremote}" .
    fi
  fi

  # Is our git remote added? (aka homebrew)
  if [[ "$( git remote -v )" != *"${gitremote}"* ]]; then
    echo -e '\n[i] Missing git remote:' "${gitremote}"
    git init >/dev/null
    git remote add origin "${gitremote}" 2>/dev/null
  fi

  # Make sure to prep checkout first
  git checkout -- .

  # Update from git
  git pull origin master

  # If conflicts, clean and try again
  if [[ "$?" -ne 0 ]]; then
    git clean -d -fx ""
    git pull origin master
  fi

  echo -e "\n[*] Update finished."
  exit 6
}

function notruncate()
{
  NOTRUNCATE=1
}

## Check for empty args
if [[ $# -eq 0 ]]; then
  usage >&2
fi

## Parse short arguments
while getopts "dhu" arg "$@"; do
	if [[ "${arg}" = "?" ]]; then
		usage >&2;
	fi
	case ${arg} in
		h) usage >&2;;
		d) notruncate;;
		u) update;;
	esac
	shift $(( OPTIND - 1 ))
done

## If we cannot find dpass.csv
if [[ ! -f "${csvpath}" ]]; then
	echo '[!] Could not find: ' ${csvpath}
	exit 1
fi

## Printing dotted lines in the correct manner
function drawline()
{
  printf "%0.s-" $( eval echo {1..$(( COL1 + 1 ))} )
  echo -n " "
  printf "%0.s-" $( eval echo {1..$(( COL2 - 1 ))} )
  echo ""
}
COL2=$(( ${#gitpath} + 15 ))
COL1=$(( $( tput cols ) - COL2 - 1 ))

TERMS=$(echo $@ | tr '[:upper:]' '[:lower:]'| sed 's_/_\\/_g' | tr ' ' '|')

if [[ $NOTRUNCATE ]]; then
	SEARCH="awk -F '[,]' 'BEGIN {printf \" %-15s | %-25s | %-20s | %s\n\", \"Vendor\", \"Model\", \"Username\", \"Password\";} tolower(\$0) ~ /$TERMS/ {printf \" %-15s | %-25s | %-20s | %s\n\", \$1, \$2, \$4, \$5; count++} END{printf \"\tDisplaying %s of %s passwords\n\", count, FNR}' \"${csvpath}\"";
else
	SEARCH="awk -F '[,]' 'BEGIN {printf \" %-15s | %-25s | %-20s | %s\n\", \"Vendor\", \"Model\", \"Username\", \"Password\";} tolower(\$0) ~ /$TERMS/ {printf \" %-15s | %-25s | %-20s | %s\n\", substr(\$1,1,15), substr(\$2,1,25), substr(\$4,1,20), \$5; count++} END{printf \"\tDisplaying %s of %s passwords\n\", count, FNR}' \"${csvpath}\"";
fi

eval $SEARCH

exit 0
